<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>vscode开发环境配置</title>
      <link href="/2018/04/21/vscode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/21/vscode%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><ul><li>vscode</li><li><code>JavaScript</code> 和 <code>vue</code> 开发环境</li><li>editorconfig</li><li>prettier</li><li>eslint</li><li>beautify</li></ul><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><h3 id="editorConfig"><a href="#editorConfig" class="headerlink" title="editorConfig"></a>editorConfig</h3><p>这个工具是用来设置文本编辑器的一些行为，比如说行尾风格，缩进类型力和大小，编码等</p><p>目的是为了统一编辑器的设置</p><h3 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h3><p>这是一个代码格式化工具，按照给定的设置对代码进行格式化</p><p>这里主要是对<code>JS</code>文件进行格式化</p><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><p>这是一个代码检查工具，用来检查代码中和设定的规则不符合的地方，并给出警告；</p><p>同时还能够检查出一些代码中的低级错误</p><p>默认支持<code>JS</code>文件，可以通过添加插件来支持<code>vue</code>文件</p><h3 id="beautify"><a href="#beautify" class="headerlink" title="beautify"></a>beautify</h3><p>这也是一个代码格式化工具，不过似乎比<code>prettier</code>支持的文件类型要多</p><p>这里用来对 <code>html</code> 和 <code>vue</code> 文件中的模板部分进行格式化</p><h2 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h2><p>现在我们希望能够通过<code>prettier·</code>对<code>js</code>文件进行格式化，然后让<code>eslint</code>对其进行检查，然后根据配置自动修正一些不符合规则的地方，这里是以<code>eslint</code>的规则为核心，这样最后的输出就和<code>eslint</code>的配置一致</p><p>还有一种是以<code>prettier</code>的规则为核心，通过将<code>prettier</code>的设置作为<code>eslint</code>的配置项进行整合，最后获得的代码和<code>prettier</code>的设置一致（可以去看一下<code>eslint-plugin-prettier</code>这个插件的文档）</p><p>对于<code>vue</code>文件，希望可以通过<code>beautify</code>对模板部分进行格式化，<code>prettier</code>对<code>script</code>部分进行格式化，然后<code>eslint</code>进行检查和修正</p><h3 id="2-1-js-文件"><a href="#2-1-js-文件" class="headerlink" title="2.1 js 文件"></a>2.1 js 文件</h3><p>首先在 vscode 中安装这几个插件：</p><ol><li>editorconfig</li><li>prettier</li><li>eslint</li></ol><p>注意：这几个是 vscode 的插件，不要和这几个工具本身弄混了</p><p>然后对这几个插件进行配置</p><h4 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h4><p>这个比较简单，不需要进行任何配置，只需要在当前工作目录中添加一个<code>.editorconfig</code>文件，里面写一些配置就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">insert_final_newline = true</span><br></pre></td></tr></table></figure><h4 id="prettier-1"><a href="#prettier-1" class="headerlink" title="prettier"></a>prettier</h4><p>个人希望最后的输出能够和<code>eslint</code>的配置一致，<code>prettier</code>只是作为格式化工具，所以选择流程中的第一种，以<code>eslint</code>为核心</p><p>所以直接打开<code>prettier</code>插件的配置，将<code>&quot;prettier.eslintIntegration&quot;: true,</code>这个配置项设为<code>true</code>（这里使用了<code>prettier-eslint</code>这个工具，不过不需要用户手动安装）</p><p><code>&quot;javascript.format.enable&quot;: true</code>，这一项打开，保证<code>prettier</code>能够工作</p><p>然后编写自己的<code>prettier</code>格式化配置就可以了，<code>prettier</code>的配置可以使用<code>.prettierrc</code>文件，也可以直接在插件里进行配置</p><h4 id="eslint-1"><a href="#eslint-1" class="headerlink" title="eslint"></a>eslint</h4><p><code>prettier</code>插件和规则配置完毕之后，对<code>eslint</code>进行配置，规则配置这里不提，提一下插件的配置</p><p>打开<code>eslint</code>的 autofix 功能，每次写完代码后，先格式化一下，然后保存，<code>eslint</code>就会自动进行修正（其实这里是为了保险，其实格式化之后<code>eslint</code>已经自动 fix 了，保存后自动修正功能其实是个保险）</p><p><code>&quot;editor.formatOnSave&quot;: false,</code> 这一项如果打开，可以在保存的时候，自动调用<code>prettier</code>进行格式化，自动<code>eslint</code>修正，就不需要再手动格式化一下了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 打开保存修正功能</span><br><span class="line">"eslint.autoFixOnSave": true,</span><br><span class="line">// 关闭保存自动格式化功能</span><br><span class="line">"editor.formatOnSave": true,</span><br><span class="line">// 指定需要检查的文件</span><br><span class="line">"eslint.validate": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"autoFix"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"javascript"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"autoFix"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"vue"</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>至此，<code>js</code>文件的环境配置就算完成了</p><h3 id="2-2-vue-环境"><a href="#2-2-vue-环境" class="headerlink" title="2.2 vue 环境"></a>2.2 vue 环境</h3><p>这里和<code>js</code>文件环境不同的地方有两点：</p><ol><li>需要对<code>vue</code>文件内的<code>html</code>部分进行格式化</li><li><code>prettier-eslint</code>在这里会失效，需要找代替方法</li></ol><p>editorconfig、prettier 的插件配置没有变化</p><h4 id="eslint-2"><a href="#eslint-2" class="headerlink" title="eslint"></a>eslint</h4><p>在<code>vue</code>文件中，<code>prettier-eslint</code>失效，格式化后不能自动调用<code>eslint</code>进行修正，所以需要寻求替代方案</p><p>将这两项配置都打开，这样保存的时候会先使用<code>prettier</code>进行格式化，然后又会触发<code>eslint</code>的修正；相当于是手动实现了之前的功能</p><p><strong>现在如果只是使用格式化的化，并不会自动进行检查，这一点要注意</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"editor.formatOnSave": true</span><br><span class="line">"eslint.autoFixOnSave": true,</span><br></pre></td></tr></table></figure><p>注意：为了让<code>eslint</code>能够识别<code>vue</code>文件，<code>eslint</code>的配置文件中可能需要添加一些插件，比如<code>eslint-plugin-vue</code>和<code>eslint-plugin-html</code>，这里不做讨论</p><h4 id="vetur"><a href="#vetur" class="headerlink" title="vetur"></a>vetur</h4><p>vetur 这个插件就不需要多说了，必备</p><h4 id="beautify-1"><a href="#beautify-1" class="headerlink" title="beautify"></a>beautify</h4><p>这个插件主要是为了处理模板中的<code>html</code>格式化问题，设置参考 vetur 中给出的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// html模板的格式化配置</span><br><span class="line">"beautify.config": &#123;</span><br><span class="line">  "editorconfig": true,</span><br><span class="line">  "indent_size": 2,</span><br><span class="line">  "wrap_attributes": "force-aligned",</span><br><span class="line">  "wrap_attributes_indent_size": 2,</span><br><span class="line">  "wrap_line_length": 80</span><br><span class="line">&#125;,</span><br><span class="line">"beautify.language": &#123;</span><br><span class="line">  "html": ["htm", "html"]</span><br><span class="line">&#125;,</span><br><span class="line">"vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">"vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">  "js-beautify-html": &#123;</span><br><span class="line">    "editorconfig": true,</span><br><span class="line">    "indent_size": 2,</span><br><span class="line">    "wrap_attributes": "force-aligned",</span><br><span class="line">    "wrap_attributes_indent_size": 2,</span><br><span class="line">    "wrap_line_length": 80</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样就可以同时格式化模板和<code>js</code>了，至于样式文件的格式化，<code>vetur</code> 默认是使用<code>prettier</code>进行的，应该可以单独选择其他的格式化工具</p><ul><li><u><strong>注意：<code>prettier</code>和<code>beautify</code>这两个插件会产生冲突，导致<code>prettier</code>在<code>js</code>文件的格式化中失效，所以需要配置<code>beautify</code>，让其不格式化<code>js</code>文件</strong></u></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在vscode 的配置文件中，加入这一段</span><br><span class="line">"beautify.ignore": "**/*.js"</span><br></pre></td></tr></table></figure><h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2><p>将 vscode 配置文件，<code>.editorconfig</code>，<code>.eslintrc.xx</code>，<code>.prettierrc</code>这些配置文件保存起来，便于之后使用</p>]]></content>
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js和css阻塞问题</title>
      <link href="/2018/04/06/js%E5%92%8Ccss%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/06/js%E5%92%8Ccss%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js的阻塞特性"><a href="#js的阻塞特性" class="headerlink" title="js的阻塞特性"></a><code>js</code>的阻塞特性</h2><ol><li><code>js</code>脚本的加载是并行的，不阻塞<code>CSS</code>文件的加载</li><li>行内的<code>js</code>内容会阻塞整个页面内容的渲染，外联<code>js</code>只会阻止位于自己之后位置的渲染</li><li><code>js</code>脚本的执行是串行的，并且按照位于页面中的顺序从上到下执行</li></ol><h2 id="CSS的阻塞特性"><a href="#CSS的阻塞特性" class="headerlink" title="CSS的阻塞特性"></a><code>CSS</code>的阻塞特性</h2><ol><li><code>css</code>加载不会阻塞 DOM 树的解析</li><li><code>css</code>加载会阻塞 DOM 树的渲染</li><li>css 加载会阻塞后面 js 语句的执行（因为 js 可能会操作样式）</li><li><code>CSS</code>加载不会影响后面资源的加载，加载是并行的</li></ol><h2 id="整体页面的加载流程"><a href="#整体页面的加载流程" class="headerlink" title="整体页面的加载流程"></a>整体页面的加载流程</h2><p><img src="https://pic1.zhimg.com/v2-945e991c20670ff9c2b87a01090c460d_r.jpg" alt="加载流程"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>before load content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"mian.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>after load content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s0aflw.dm.files.1drv.com/y4mfX6EextsQRZkctlr9KbebFIRg6ERc2swfdNinndjUsbwaVmgduWyL4mCrwOxAWLxZr3DwoLUD-RAi1v5xXtjh-JK35LF9pnhXQ2fNnR-jR4i53r2J-bJjO_Kyw7FAnKE5rlkG7rTAc09F68-DNz6s1ROdePs8xGkJMocM1lNYvseTxC0YDK7Qho-j1tFH16aBqNSy6jd1_qU9k2oDWQBzg?width=1842&height=393&cropmode=none" width="1842" height="393"></p><p><img src="https://s0ailw.dm.files.1drv.com/y4mAaFkVTpOtgV9-qxFhm1hbs2sJp8w3TGrfz6X9Xb2TYS5AjbA5inmLJKhjOG4nh4G-4EBLlfTFo1_rMbWPr3YU5niDJd49h-M_WuBqnxVc0sbHT0x8fwR1Ur5A9-WACZGKFtXhrzs5CpFzklBZuVdyqufA0swmfrELARutstwwy1W1Qa9KwzFsPwTcNVbn9X71b7YjAJMRHDvJwvMSL8iWQ?width=1018&height=427&cropmode=none" width="1018" height="427"></p><p><img src="https://s0ahlw.dm.files.1drv.com/y4mjUifNbjH3-0v4cKHj2ECknhAtESiKCBsUkokq6u8N97hAkpDx2h2HbpMiXRE5eRBARjBitm04E683ebUVZhdrBqvDVR8K9QpIM10ccNvFiLYFYRqH-oaHQ0ON5hbUZpDhwWVJ9Zc4TeKwNtF9qt9hCwGSD0TwC-IiYsCEZI4sFxp_6s1u_SLyAW44CDkskASgfTM30Ur6Re-rDrgUgXYVw?width=1010&height=364&cropmode=none" width="1010" height="364"></p><ol><li>浏览器首先下载<code>HTML</code>文件，并且初步解析，发出复数个请求来并行下载<code>js</code>和<code>css</code>文件</li><li>同时开始对<code>HTML</code>文件进行解析，构建<code>DOM</code>树</li><li>遇到<code>js</code>标签会等待其加载完毕，并执行完毕，期间不会进行<code>DOM</code>树的解析，先前加载的内容会显示在页面上</li><li>待<code>JS</code>脚本执行完毕后，继续解析<code>DOM</code>，遇到了<code>CSS</code>文件，等待其加载</li><li>加载过程中不会阻止<code>DOM</code>的解析和构建，但是会组织渲染树的生成（因为<code>CSSOM</code>还没有生成），以及后续<code>JS</code>的执行</li><li>加载完成后，生成<code>CSSOM</code>，然后就会执行后续的<code>JS</code>以及渲染树的构建</li><li>在<code>DOM</code>树和<code>CSSOM</code>构建完成的时候，开始并行下载其他的资源（图片，音乐等）（这一点可能不同的浏览器表现不一致，但是可以肯定的是其他的资源一般都是晚于<code>css</code>和<code>js</code>加载）</li><li>（浏览器似乎是一边构建渲染树，一边进行渲染，两者是同时进行的，并不会等待渲染树完全生成完毕再渲染）</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>嵌入<code>JS</code>应该放在什么位置？</p><p>1、放在底部，虽然放在底部照样会阻塞所有呈现，但不会阻塞资源下载。</p><p>2、如果嵌入 JS 放在 head 中，请把嵌入 JS 放在 CSS 头部。</p><p>3、使用 defer（只支持 IE）</p><p>4、不要在嵌入的 JS 中调用运行时间较长的函数，如果一定要用，可以用<code>setTimeout</code>来调用</p><p>外联<code>css</code>和<code>js</code>的处理方法：</p><ol><li>如果是首屏渲染必须的样式，就放到<code>head</code>中进行加载</li><li>如果<code>js</code>文件之间没有依赖关系，可以使用<code>async</code>实现异步加载和执行，不会堵塞渲染</li><li>其他的<code>js</code>和<code>css</code>完全可以放到<code>body</code>的尾部，保证页面先显示出来，之后再添加这些样式，执行这些<code>js</code></li><li>尽量不要使用嵌入的<code>js</code>，无论放在哪里，都会阻塞全部页面的渲染，如果一定要使用，请放在靠前的位置</li><li>所以<code>js</code>和<code>css</code>文件的压缩打包和在页面中的位置是非常重要的</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>Chrome 调试工具禁止缓存</p><p>把第三个选项选中</p><p><img src="https://s0aclw.dm.files.1drv.com/y4mDUXE9TVQHMKxfYwEoAxj3sDmKUlH5-ie_Ftc0T1Fz4eFLUaWCmQ6gZW-OYm6ZOucvJU4UtmcCFMx0Nhgr-ohgH4yzX_9Sqwrv6TJzN_2nxYlZ5rC1SqBiw-vxrpiz-94O4de1X1w80X0nvyfY9spE4Ixo5glvgNs0NYqI7s0x094gJmy_e8Q-xgKQ6eJFLuPaoK9fqn5aA5YehWNQv_1PA?width=467&height=258&cropmode=none" width="467" height="258"></p><p>限制加载资源的速度</p><p><img src="https://s0ablw.dm.files.1drv.com/y4mpQkNqKvICwmx4G6nxQ_6KPze0LJyzRt_fUlADPsB1c0qMVZ2uNKb1xM0R1Tek-hT85fc7M4BoT5GjsTBBNBTK9BVhVDdGyfAV_7oS9FE-CZMXsXVQ6w6Jrjvf3TA-jtjvNjqXKY1W_KOQB5zXHRXcYh_xTyAo1WgY2GIIt0GajYVCeIMccqqzQSAaNtkg8wzJFjEkwLcLbllajdSOD9LjA?width=744&height=302&cropmode=none" width="744" height="302"></p><p>浏览器刷新按钮上点击右键</p><p><img src="https://s0aelw.dm.files.1drv.com/y4m3T7P6qgWhs-udgd64uVrH6wGa3dBG3TuxxadPxxjqadCvrfWiz2IAHpb6Pd5Itkld_zbbmouhoODRUr0VH2cIYcP0gOwvaSypq7hDW8M419WyrcKRkJ26YsI95pA156_SkIhgCospRzxZtYpZiUq-dkLUGZpAjLQE0nK3t3I2rl-ZL-XE-qkF9RbwxL0H2Ks0QXw_Xsfo0EQn2zYT57IAQ?width=337&height=99&cropmode=none" width="337" height="99"></p>]]></content>
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器相关 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>时光飞逝</title>
      <link href="/2018/03/28/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D/"/>
      <url>/2018/03/28/%E6%97%B6%E5%85%89%E9%A3%9E%E9%80%9D/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2018/03/28/时光飞逝/example.jpg"><blockquote><p>感叹一下时间的流逝<br>感觉年龄越大，时间就过的越快</p></blockquote>    <div id="aplayer-VuKfGsJs" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="27571001" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#454545"></div>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue插件相关</title>
      <link href="/2018/03/28/vue%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/03/28/vue%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><code>Vue.use</code></li><li>使用<code>vue-router</code></li><li>创建插件</li><li>需要对实例属性、虚拟<code>DOM</code>和实际<code>DOM</code>之间的关系有一个非常清晰的认识</li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人认为插件就是添加一些全局的功能</p><p>在学习开发插件之前，先看一下虚拟 DOM 和实际 DOM 的关系</p><hr><h2 id="虚拟-DOM-和真实-DOM"><a href="#虚拟-DOM-和真实-DOM" class="headerlink" title="虚拟 DOM 和真实 DOM"></a>虚拟 DOM 和真实 DOM</h2><p>每一个<code>Vue</code>实例都是一个虚拟 DOM</p><p>个人认为虚拟 DOM 就是一个对象，里面存储了用来描述真实 DOM 的信息，包括结构，样式和行为，并且可以通过虚拟 DOM 对这些信息进行监控和操作。</p><p>可以使用渲染函数将虚拟 DOM 渲染为真实的 DOM，并且该虚拟 DOM 和生成的真实 DOM 是由关联的</p><p>如果不想使用渲染函数，还可以自己创建 DOM，然后通过<code>this.$mount</code>将虚拟 DOM 挂载在真实的 DOM 容器之上，从而通过操作虚拟 DOM 来影响真实的 DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="comment">// 页面的根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>, <span class="comment">//然后将渲染出来的dom插入到这个地方，即挂载</span></span><br><span class="line">render: <span class="function"><span class="params">ce</span> =&gt;</span> ce(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// &lt;div id="app"&gt;&lt;/div&gt;是 index.html上面的dom</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">template: <span class="string">'&lt;div&gt;&lt;App&gt;&lt;/App&gt;&lt;/div&gt;'</span> <span class="comment">// 把模板内的东西渲染为真实的DOM，插入到#app下，对应的虚拟DOM是根实例</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a><code>Vue.use</code></h2><p>插件通常会为 <code>Vue</code>添加全局功能。插件的范围没有限制——一般有下面几种：</p><ol><li>添加全局方法或者属性，如: <a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">vue-custom-element</a></li><li>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">vue-touch</a></li><li>通过全局 mixin 方法添加一些组件选项，如: <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li></ol><p>这些操作无一例外都需要访问<code>Vue</code>这个变量，所以为了能够提供一个通用的接口，来提供对<code>Vue</code>变量的访问，即<code>Vue.use</code>和<code>myPlugin.install</code>这两个方法</p><p><code>Vue.use</code>函数接受两个参数，第一个是插件对象，第二个是相关的选项，<code>use</code>方法会调用插件的<code>install</code>方法，来为<code>Vue</code>对象添加上述的全局功能</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myPlugin.js</span></span><br><span class="line"><span class="comment">// 插件文件，用来沟通插件的组件和和全局功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> notifyComponent <span class="keyword">from</span> <span class="string">'./notify.vue'</span> <span class="comment">// 导入当前插件需要的vue组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notify = &#123;&#125; <span class="comment">// 最后要导出的插件对象，被Vue.use调用</span></span><br><span class="line"></span><br><span class="line">notify.install = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">//</span> install方法，用来添加全局功能</span></span></span><br><span class="line"><span class="function"><span class="params">Vue,</span></span></span><br><span class="line"><span class="function"><span class="params">options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">delay: <span class="number">3000</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这里这个实例方法就是用户使用的时候调用的方法，这里的opt为用户输入，优先级最高</span></span><br><span class="line">Vue.prototype.$notify = <span class="function"><span class="keyword">function</span>(<span class="params">message, opt = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">counter++</span><br><span class="line"><span class="comment">// 这里需要覆盖外部给出的options的默认值</span></span><br><span class="line">options = &#123; ...options, ...opt &#125;</span><br><span class="line"><span class="keyword">let</span> Notify = Vue.extend(notifyComponent) <span class="comment">// 生成一个组件的构造函数</span></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Notify() <span class="comment">// 该组件对应的虚拟dom</span></span><br><span class="line"><span class="keyword">let</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>) <span class="comment">// DOM容器</span></span><br><span class="line">vm.count = counter</span><br><span class="line">vm.$mount(oDiv) <span class="comment">// 把虚拟dom渲染出的这是DOM挂载到dom容器上</span></span><br><span class="line">vm.msg = message</span><br><span class="line"><span class="comment">// 注意这里vm.$el 和 oDiv 并不是同一个DOM，vm.$el中已经将虚拟DOM中的结构数据生成并且注入到DOM中，生成的真实DOM</span></span><br><span class="line"><span class="comment">// 最后将真实的dom插入到页面上</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(vm.$el)</span><br><span class="line"><span class="comment">// 之后只要在vue实例上使用$notify方法，就会在body内插入一个dom</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 延时一段时间后删除dom</span></span><br><span class="line"><span class="comment">// 移除当前实例挂载的dom</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(vm.$el)</span><br><span class="line">counter--</span><br><span class="line"><span class="comment">// 这个函数接收dom实例</span></span><br><span class="line">&#125;, options.delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> notify</span><br></pre></td></tr></table></figure><hr><h2 id="完整的一个插件"><a href="#完整的一个插件" class="headerlink" title="完整的一个插件"></a>完整的一个插件</h2><p>插件文件：注册全局功能</p><p><code>Vue.use</code>：安装插件</p><p>所以一个插件至少需要一个插件文件</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><code>notify.js</code>如上面所示，使用了一个名为<code>notify.vue</code>的组件</p><p>这个组件是一个小型的弹出提示框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;notify&quot; :style=&quot;&#123;&apos;bottom&apos;:bottom&#125;&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &apos;&apos;,</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">bottom() &#123;</span><br><span class="line">return `$&#123;this.count * 4&#125;rem`</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.notify &#123;</span><br><span class="line">/* box-sizing: border-box; */</span><br><span class="line">max-width: 200px;</span><br><span class="line">min-height: 2rem;</span><br><span class="line">background-color: rgba(0, 0, 0, 0.4);</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 2rem;</span><br><span class="line">color: white;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">position: fixed;</span><br><span class="line">right: 1rem;</span><br><span class="line">padding: 0.3rem 0.8rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后在入口文件（或者专门管理插件的文件中）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> notifyPlugin <span class="keyword">from</span> <span class="string">'./plugins/notify.js'</span></span><br><span class="line">Vue.use(notifyPlugin,&#123;<span class="attr">delay</span>:&#123;<span class="number">3000</span>&#125;)</span><br></pre></td></tr></table></figure><p>最终的效果：</p><p>实现了一个弹出提示的插件，可以自定义多长时间后消失</p><p><img src="https://s0aglw.dm.files.1drv.com/y4m4ft34mWb1vObzxf0mQHqO8s2xo7pWTi85cs6OuKB_x1ydohTEazzwBd0rvGIxgtF9a6eKgPmE8xPJpCYkL05R-HYb0pTMOOJYMG58dn_4uDJ4RkWwW0t9Co6_BF3y6phCdNdloyijY5HwcdlIN_788Jh7HIE5pc-VE2zf0Wk81Z5HftBy_e2auhtf9Y_dUbmZC78f8Ut11xRG8O0lmL69A?width=358&height=383&cropmode=none" width="358" height="383"></p>]]></content>
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/27/hello-world/"/>
      <url>/2018/03/27/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
